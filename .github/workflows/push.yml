name:                        release

on:
  push:
    branches:
      - main

jobs:
  # lint code.
  lint:
    name:                    Lint
    runs-on:                 ubuntu-latest

    steps:
      - name:                Checkout
        uses:                actions/checkout@v3
      # only lint on actual code changes.
      - uses:                dorny/paths-filter@v2
        id:                  changes
        with:
          base:              ${{ github.event.push.before }}
          filters:           |
            src:
              - '**/*.swift'
      - name:                Lint
        if:                  steps.changes.outputs.src == 'true'
        uses:                norio-nomura/action-swiftlint@3.2.1
        with:
          args:              --strict

  # release a new version.
  release:
    name:                    Release
    needs:                   lint
    runs-on:                 ubuntu-latest

    steps:
      # checkout `main`.
      - name:                Checkout
        id:                  checkout
        uses:                actions/checkout@v3
        with:
          fetch-depth:       0
          token:             ${{ secrets.GITHUB_TOKEN }}
          ref:               main
      # create the changelog.
      - name:                Changelog
        id:                  changelog
        uses:                TriPSs/conventional-changelog-action@v3
        with:
          git-message:       "chore(release): relase \'v{version}\'"
          git-user-name:     "github-actions"
          git-user-email:    "41898282+github-actions[bot]@users.noreply.github.com"
          github-token:      ${{ secrets.GITHUB_TOKEN }}
          tag-prefix:        ''
          output-file:       'false'
          skip-commit:       'true'
          skip-version-file: 'true'
      # release the new version.
      - name:                Release
        id:                  release
        uses:                actions/create-release@v1
        if:                  ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN:      ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:          ${{ steps.changelog.outputs.tag }}
          release_name:      v${{ steps.changelog.outputs.tag }}
          body:              ${{ steps.changelog.outputs.clean_changelog }}

  # create docs.
  docs:
    name:                    Docs
    needs:                   release
    runs-on:                 ubuntu-latest

    steps:
      # checkout the `main` branch.
      - name:                Checkout
        id:                  checkout
        uses:                actions/checkout@v3
        with:
          token:             ${{ secrets.GITHUB_TOKEN }}
          ref:               main
      # only push docs on actual code changes.
      - uses:                dorny/paths-filter@v2
        id:                  changes
        with:
          base:              ${{ github.event.push.before }}
          filters:           |
            src:
              - '**/*.swift'
              - '**/push.yml'
      # remove `@_exported` files.
      - name:                Suppress @_exported
        run:                 find Sources -name "@_exported.swift" -delete
      # create documentation for `ComposableRequest`.
      - name:                Docs (Requests)
        if:                  steps.changes.outputs.src == 'true'
        uses:                SwiftDocOrg/swift-doc@master
        with:
          base-url:          "https://sbertix.github.io/ComposableRequest/Requests/"
          format:            "html"
          inputs:            "Sources"
          module-name:       Requests
          output:            docs/Requests
      # create documentation for `ComposableStorage`.
      - name:                Docs (Storage)
        if:                  steps.changes.outputs.src == 'true'
        uses:                SwiftDocOrg/swift-doc@master
        with:
          base-url:          "https://sbertix.github.io/ComposableRequest/Storage/"
          format:            "html"
          inputs:            "Sources"
          module-name:       Storage
          output:            docs/Storage
      # create documentation for `ComposableStorageCrypto`.
      - name:                Docs (StorageCrypto)
        if:                  steps.changes.outputs.src == 'true'
        uses:                SwiftDocOrg/swift-doc@master
        with:
          base-url:          "https://sbertix.github.io/ComposableRequest/StorageCrypto/"
          format:            "html"
          inputs:            "Sources"
          module-name:       StorageCrypto
          output:            docs/StorageCrypto
      # update permissions.
      - name:                Update Permissions
        if:                  steps.changes.outputs.src == 'true'
        run:                 'sudo chown --recursive $USER docs'
      # publish to GitHub pages.
      - name:                Publish
        if:                  steps.changes.outputs.src == 'true'
        uses:                JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN:      ${{ secrets.CHATOPS_PAT }}
          BRANCH:            gh-pages
          FOLDER:            docs
